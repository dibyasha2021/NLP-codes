# -*- coding: utf-8 -*-
"""Information_retrival_A1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LVQjeTgTcsQe-Fxn5bGQsFZOCMu7bTvz
"""

# basic Libraries
import pandas as pd
import numpy as np

# the text's are taken from the book 
# GEORGE ROMNEY BY ROWLEY CLEEVE

# text 1 is from chapter 2 LADY HAMILTON
text1 = "In any consideration of the life and art of George Romney, however brief, it is impossible to leave out the name of Lady Hamilton, as she was so constantly painted by him. It will be well, therefore, for a short section of this little book to be devoted to a story of the life of this fascinating person, who was fated to exercise so strong an influence upon the painter. It is hardly possible for the most imaginative romancer to tell a story more chequered in its events, more thrilling in its emotions, and more sad in its end. Emma Lyon was the daughter of a smith in Cheshire, a humble man, who died in 1761, after a very short married life, and left his widow and infant daughter wholly without support. The widow moved at once from Neston, where her husband had died, to Hawarden, her native place, and here by the aid of her relatives, almost equally poor with herself, she managed to bring up her child and send her to a dame's school in the village. When about twelve Emma went as nursery-maid to the family of a Mr. Thomas, a doctor of Hawarden, whose son afterwards became an eminent surgeon."
# text 2 is from chapter3 THE ART OF ROMNEY
text2 = "Romney is almost exclusively known as a painter of portraits, his historical scenes attracting but little attention. In their way they were remarkable, but they were forced in their conception and over-sentimental in their design, as was the fashion of the day. In his portraits he struck a much truer note and by them his repute will stand. It is almost impossible, taking into consideration the time in which he lived, to avoid comparing him with his great rivals Reynolds and Gainsborough, and perhaps it is well that it should be so, as by thinking of him in connection with these two men it will be possible to obtain a better impression of his capabilities and a knowledge of his faults. He was, it is quite certain, a far less important man than Gainsborough, who must certainly be reckoned as the greatest of the three. He lacked the colour sense that distinguished that great artist; he was by no means his equal in technical merit; and he had no ability to produce landscape-work that gave so great a charm to the pictures of the Sudbury artist. The wonderful poetry that streamed from the brush of Gainsborough and refined all his works, the delicacy, the grace and the sweetness of his figures are all superior qualities to those which Romney possessed, whilst as a colourist Gainsborough stood head and shoulders above both his rivals. When we come to draughtsmanship we are, however, on a different footing, as Romney was the superior both of Reynolds and Gainsborough in ability to draw with accuracy and truth, and he also surpassed both of them in the manner in which he obtained his effects. Where Reynolds laboured Romney achieved the same effect with the greatest ease and simplicity; and, in fact, the word simplicity may be taken as the key-word in anything like a critical survey of Romney's work."
#text 3 is from chapter 4 OUR ILLUSTRATIONS
text3 = "From the National Gallery we have selected two: a portrait of Mrs. Mark Currie and the portrait called The Parson's Daughter. Mrs. Mark Currie represents a life-size, nearly full-length figure. The lady is dressed in a simple white muslin dress with short sleeves, and an elaborate fichu of the same material. Round her waist is a silk sash of pale red, and the ribbons which trim her sleeves and fichu are of the same pale tint. Her fair hair, slightly powdered, falls in full clusters around her shapely shoulders. Her face wears a quiet thoughtful expression, with a lurking look of humour about the eyes. The background is slightly suggested landscape and trees. The lady was a Miss Elizabeth Close, who married Mr. Mark Currie, a goldsmith and banker, in January, 1789, and gave her first sitting for the portrait on the 7th of May of the same year.It is not known whom The Parson's Daughter represents, nor why it bears that name.It is a very charming circular portrait of a young lady with dark eyes and auburn hair, which is powdered and bound with a green ribbon. She wears a brown dress and white handkerchief. The modelling on the face is very dexterously painted, and the tender thoughtful expression of the dark eyes quite beautiful. The hair is painted in very broad, powerful fashion, and the draperies over the bust indicated lightly and put on with a wonderful sliding movement which is notable. On the whole Romney seldom did a more pleasing piece of work than the portrait of this quiet and refined dainty girl. The Clavering Children, which we have the special permission of the owner (Rev. J. W. Napier-Clavering) to reproduce, is a very happy example of Romney's ability to depict children in movement and to give the effect of rapid motion."

# text pre-processing
import re
import math
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from gensim.parsing.preprocessing import remove_stopwords
import nltk

nltk.download('all')

# List of the documents
Doc_list=[text1,text2,text3]
# making dataframe from the document list
Dataset=pd.DataFrame(Doc_list)

Dataset = Dataset.rename(columns = {0:'Documents'})

Dataset

# Merging all the doc into one
# accessing the document no.
All_Docs=[]
for y in range(3): 
  docs=Dataset.iloc[y]["Documents"]
  All_Docs.append(docs)
#All_Docs

## importing library for punctuatuin removal
import string
#string.punctuation
# Initializing the tokenniers
w_tokenizer = nltk.tokenize.WhitespaceTokenizer()
lemmatizer = nltk.stem.WordNetLemmatizer()

# for stopwords
remove_stop= nltk.corpus.stopwords.words('english')

# function to remove puncuation and lowercasing the text

def remove_punctuation(text):
      
    for i in range(len(text)):
      punctuationfree="".join([i for i in text if i not in string.punctuation])
      punct_free=punctuationfree.lower()    
    return punct_free

Dataset['No_punct']= Dataset['Documents'].apply(lambda x:remove_punctuation(x))

def lemmatize_text(punct_free):
  text =punct_free
  token_data=[lemmatizer.lemmatize(w) for w in w_tokenizer.tokenize(text)]
  return token_data

Dataset['final']= Dataset['No_punct'].apply(lambda x:lemmatize_text(x))

def stopwords_removal(token_data):
  text =token_data
  output=[]
  for i in text:
    ft=remove_stopwords(i)
    if ft == '':
      continue 
    else :
      output.append(ft)
  return output
  


#applying the function to the document
Dataset['Pre+processed_doc']= Dataset['final'].apply(lambda x:stopwords_removal(x))
Dataset

Dataset=Dataset.drop(columns=['No_punct','final'],axis=1)
Dataset

#ALL the documents
#All_Docs

# list of words in douments
All_words=[]
for y in range(3):
  documents=Dataset.iloc[y]["Pre+processed_doc"]
  All_words.append(documents)
print(All_words)

#finding Unique words in all  the documents
def Unique_words(list_of_tokens):
  n=len(list_of_tokens)
  s=1
  wordset=set(list_of_tokens[0])
  while s<n:
    Uniq_wordset=wordset.union(set(list_of_tokens[s]))
    s=s+1
  return Uniq_wordset


# set of unique words
Uniq_words=Unique_words(All_words)
#Uniq_words

int(bool(2))

# Calculating Bag of words
def calculateBOW(wordset,doc):
  tf_diz = dict.fromkeys(wordset,0)
  for word in doc:
      tf_diz[word]=int(bool(doc.count(word)))

  return tf_diz

#BOW of All doc
Bag_of_words=[]
for doc in All_words:
    Bag_of_words.append(calculateBOW(Uniq_words,doc))
Bag_of_words

#dataframe of the given Bag of words
#for single doc replace Bag_of_words--> Bag_of_words_single
df_bow_all = pd.DataFrame(Bag_of_words)
df_bow_all = df_bow_all.fillna(0)
df_bow_all = df_bow_all.T.astype(int)
df_bow_all

df_bow_all['WORDS'] = df_bow_all.index
pikachu=df_bow_all.reset_index()
pikachu=pikachu.drop(columns=['index'],axis=1)
pikachu

#All_words
# checking the words
w=pikachu.loc[pikachu['WORDS'] == 'keyword'].values.tolist()
word=w[0][0:3]
word

"""simple information retrieval model"""

# Boolean Query checking
query = input('Enter your query:')

def extract_(query):
  query = word_tokenize(query)
  
  final=[]
  for word in query:
      if word.lower() != "and" and word.lower() != "or" and word.lower() != "not":
        final.append((pikachu.loc[pikachu['WORDS'] == word.lower()].values.tolist())[0][0:3])
      elif word == 'and':
        final.append('and')
      elif word == 'not':
        final.append('not')
      else:
        pass
  return final


EX_list=extract_(query)
# trial 
#painted and broad and not powerful
print(EX_list)

result = [int(bool(EX_list[0][i]) and bool(EX_list[2][i]) and not(EX_list[5][i])) for i in range(len(EX_list[0]))]
result